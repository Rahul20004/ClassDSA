

public class Solution {
    public static int carFleet(int target, int[] position, int[] speed) {
        int n = position.length;
        double[][] cars = new double[n][2];
        
        // Step 1: Store positions and times in a 2D array and sort them in decreasing order of position
        for (int i = 0; i < n; i++) {
            cars[i][0] = position[i]; // Starting position
            cars[i][1] = (double) (target - position[i]) / speed[i]; // Time to reach target
        }
        Arrays.sort(cars, (a, b) -> Double.compare(b[0], a[0])); // Sort by position (descending)

        // Step 2: Use a stack to count fleets
        Stack<Double> stack = new Stack<>();
        for (double[] car : cars) {
            double time = car[1];
            if (stack.isEmpty() || time > stack.peek()) {
                stack.push(time);
            }
        }
        return stack.size(); // Stack size gives the number of fleets
    

    }
}


Explaination:
Step-by-Step Explanation of the Java Code
This Java program calculates the number of car fleets that reach the target in a road race scenario. Let's break it down step by step.

Step 1: Function Definition
java
Copy
Edit
public static int carFleet(int target, int[] position, int[] speed)
target → The final destination (mile marker) that all cars need to reach.

position[] → Array representing each car’s starting position.

speed[] → Array representing each car’s speed in miles per hour.

🚀 Goal: Find the number of car fleets (groups of cars moving together at the slowest speed).

Step 2: Store Position & Time-to-Target in a 2D Array
java
Copy
Edit
int n = position.length;
double[][] cars = new double[n][2];

for (int i = 0; i < n; i++) {
    cars[i][0] = position[i]; 
    cars[i][1] = (double) (target - position[i]) / speed[i]; 
}
Explanation
We create a 2D array cars where:

cars[i][0] stores position of the car.

cars[i][1] stores time taken to reach the target using the formula:

𝑡
𝑖
𝑚
𝑒
=
𝑡
𝑎
𝑟
𝑔
𝑒
𝑡
−
𝑝
𝑜
𝑠
𝑖
𝑡
𝑖
𝑜
𝑛
[
𝑖
]
𝑠
𝑝
𝑒
𝑒
𝑑
[
𝑖
]
time= 
speed[i]
target−position[i]
​
 
Example:
java
Copy
Edit
target = 12;
position = [10, 8, 0, 5, 3];
speed = [2, 4, 1, 1, 3];
👉 Time Calculation for Each Car:

Position	Speed	Time to Reach Target
10	2	(12 - 10) / 2 = 1.0
8	4	(12 - 8) / 4 = 1.0
0	1	(12 - 0) / 1 = 12.0
5	1	(12 - 5) / 1 = 7.0
3	3	(12 - 3) / 3 = 3.0
After this step, our cars array looks like:

csharp
Copy
Edit
cars = [
    [10, 1.0], 
    [8, 1.0], 
    [0, 12.0], 
    [5, 7.0], 
    [3, 3.0]
]
Step 3: Sort Cars by Position in Descending Order
java
Copy
Edit
Arrays.sort(cars, (a, b) -> Double.compare(b[0], a[0]));
Explanation
We sort the cars array by position in descending order.

This ensures that we process the nearest car first.

Sorted Order (Descending by Position)
csharp
Copy
Edit
cars = [
    [10, 1.0], 
    [8, 1.0], 
    [5, 7.0], 
    [3, 3.0], 
    [0, 12.0]
]
(Each pair is [position, time to target])

Step 4: Use a Stack to Count Fleets
java
Copy
Edit
Stack<Double> stack = new Stack<>();
for (double[] car : cars) {
    double time = car[1];
    if (stack.isEmpty() || time > stack.peek()) {
        stack.push(time);
    }
}
Explanation
We use a stack to track how many fleets exist.

We iterate through the sorted cars, checking the time each car takes to reach the target.

If the stack is empty or if the car’s time is greater than the top of the stack, we push the time onto the stack (this means a new fleet is formed).

Otherwise, the car joins an existing fleet.

Stack Simulation
Position	Time	Stack Before	Action Taken	Stack After
10	1.0	[]	New Fleet	[1.0]
8	1.0	[1.0]	Joins Fleet 10	[1.0]
5	7.0	[1.0]	New Fleet	[1.0, 7.0]
3	3.0	[1.0, 7.0]	Joins Fleet 5	[1.0, 7.0]
0	12.0	[1.0, 7.0]	New Fleet	[1.0, 7.0, 12.0]
Fleet Formation
Car at position 10 & 8 merge into Fleet 1.

Car at position 5 & 3 merge into Fleet 2.

Car at position 0 remains a separate Fleet 3.

Step 5: Return the Number of Fleets
java
Copy
Edit
return stack.size();
The stack size represents the number of separate fleets.

Final Output: 3

Final Code Summary
java
Copy
Edit
import java.util.Arrays;
import java.util.Stack;

public class Solution {
    public static int carFleet(int target, int[] position, int[] speed) {
        int n = position.length;
        double[][] cars = new double[n][2];
        
        // Step 1: Store position and time in an array
        for (int i = 0; i < n; i++) {
            cars[i][0] = position[i]; 
            cars[i][1] = (double) (target - position[i]) / speed[i]; 
        }

        // Step 2: Sort cars by position in descending order
        Arrays.sort(cars, (a, b) -> Double.compare(b[0], a[0])); 

        // Step 3: Use a stack to count fleets
        Stack<Double> stack = new Stack<>();
        for (double[] car : cars) {
            double time = car[1];
            if (stack.isEmpty() || time > stack.peek()) {
                stack.push(time);
            }
        }

        // Step 4: Return the number of fleets
        return stack.size();
    }

    public static void main(String[] args) {
        int target = 12;
        int[] position = {10, 8, 0, 5, 3};
        int[] speed = {2, 4, 1, 1, 3};
        
        System.out.println(carFleet(target, position, speed)); // Output: 3
    }
}
Key Takeaways
✅ Sort the cars by position in descending order to process the nearest ones first.
✅ Calculate time to reach target for each car.
✅ Use a stack to track fleets:

If a car reaches later than the top of the stack, it forms a new fleet.

Otherwise, it joins an existing fleet.
✅ Return the size of the stack, which represents the number of fleets.

🚀 Complexity Analysis
Sorting: 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn)

Processing with Stack: 
𝑂
(
𝑛
)
O(n)

Total Complexity: 
𝑂
(
𝑛
log
⁡
𝑛
)
O(nlogn)
